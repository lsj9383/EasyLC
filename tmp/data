@IMPORT "./src/Basic.lc"
0 = (lambda p (lambda x x))
1 = (lambda p (lambda x (p x)))
2 = (lambda p (lambda x (p (p x))))
3 = (lambda p (lambda x (p (p (p x)))))
4 = (lambda p (lambda x (p (p (p (p x))))))
5 = (lambda p (lambda x (p (p (p (p (p x)))))))
SLIDE = (lambda pair ((PAIR (RIGHT pair)) (INC (RIGHT pair))))
INC = (lambda n (lambda p (lambda x (p ((n p) x)))))
DEC = (lambda n (LEFT ((n SLIDE) ((PAIR 0) 0))))
ADD = (lambda n (lambda m ((m INC) n)))
SUB = (lambda n (lambda m ((m DEC) n)))
ZERO? = (lambda m ((m (lambda x FALSE)) TRUE))
LESS_EQU? = (lambda m (lambda n (ZERO? ((SUB m) n))))
TRUE = (lambda x (lambda y x))
FALSE = (lambda x (lambda y y))
IF = (lambda a (lambda b (lambda c ((a b) c))))
PAIR = (lambda m (lambda n (lambda buff ((buff m) n))))
LEFT = (lambda pair (pair (lambda m (lambda n m))))
RIGHT = (lambda pair (pair (lambda m (lambda n n))))
SUM = (lambda start (lambda end (((IF ((LESS_EQU? start) end)) (lambda x (((ADD start) ((SUM (INC start)) end) ) x))) 0)))
@JAVA 2
@JAVA ((SUM 0) ((ADD 5) 5))
->¦Ë.x { x }
->¦Ë.y { p [y] }
